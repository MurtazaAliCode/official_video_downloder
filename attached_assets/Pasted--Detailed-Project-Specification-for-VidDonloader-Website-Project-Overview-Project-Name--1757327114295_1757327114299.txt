# Detailed Project Specification for VidDonloader Website

## Project Overview
**Project Name:** VidDonloader  
**Description:** Build a fully functional, AdSense-friendly website using the latest version of Next.js (App Router preferred for modern structure). The site is a free online video processing tool where users upload their own videos and apply processing options like compression, format conversion, trimming, audio extraction, and watermarking. **Critical Note:** The site must strictly avoid any features for downloading videos from external platforms like YouTube, Facebook, or Instagram to ensure AdSense compliance. All processing is limited to user-uploaded files only. Emphasize user privacy by auto-deleting processed files after 24 hours.

**Purpose:** Provide a safe, user-friendly tool for personal video editing. Include clear disclaimers in ToS and Privacy Policy stating: "This tool is only for personal and non-commercial use with user-owned content."

**Target Audience:** Individuals needing quick video edits for personal use (e.g., social media prep, without direct platform integration).  
**Monetization:** Integrate Google AdSense ad slots (top banner on homepage, sidebar on blog/pages, and in-content on blog posts) following AdSense guidelines (no misleading placements, ensure 300px+ spacing).  
**SEO Focus:** Include a blog section for organic traffic with articles like "How to Compress Videos Online for Free" and "Best Video Formats for Social Media Reels."

**Deployment Requirements:**  
- Deployable on Vercel (primary) or Replit (for testing).  
- Optimized for low-end servers: Use serverless functions for API routes, minimize dependencies, and handle file processing efficiently (e.g., limit upload size to 500MB initially).  
- Environment variables for sensitive configs (e.g., Redis URL, AdSense ID).

**AdSense Safety Checklist:**  
- No copyrighted content scraping or external downloads.  
- Clear ToS/Privacy Policy with DMCA notice and disclaimers.  
- User uploads only; no storage of user data beyond temporary files.  
- Responsive, fast-loading site (under 3s load time).  
- No pop-ups or aggressive ads.

## Tech Stack
- **Frontend Framework:** Next.js 14+ (App Router for routing, Server Components for SEO/ performance).  
- **Styling:** TailwindCSS (with @apply for reusability, custom config for gradients and themes).  
- **Animations:** Framer Motion (for upload progress, button hovers, page transitions).  
- **File Uploads:** Multer (in API routes for handling multipart/form-data).  
- **Video Processing:** Fluent-ffmpeg (integrate with FFmpeg binary; ensure FFmpeg is installed via package or Docker for deployment).  
- **Queue Management:** BullMQ with Redis (for background processing to avoid timeouts on Vercel; fallback to simple async if Redis setup is complex).  
- **Storage:** Temporary local storage (/tmp/uploads in API); optional integration with AWS S3 or Cloudflare R2 (use environment vars for bucket creds). Auto-delete files via cron job or queue (e.g., using node-cron).  
- **Blog CMS:** Simple Markdown-based (use contentlayer or MDX for rendering; store articles in /content/blog folder). Admin route (/admin) for adding/editing Markdown files (basic form, no full CMS like Strapi to keep it lightweight).  
- **Other Dependencies:**  
  - React Dropzone for drag-and-drop uploads.  
  - Axios or native fetch for API calls.  
  - React Hook Form for forms (e.g., trim times, watermark text).  
  - Next.js Image for optimized images/ads.  
  - i18n if needed (English primary).  
- **No Additional Installs:** Avoid heavy libs; stick to listed stack.

## Next.js Project Structure
Use a clean, scalable structure. Initialize with `npx create-next-app@latest vid-donloader --typescript --tailwind --app`. Key folders/files:

```
vid-donloader/
├── app/                          # App Router
│   ├── globals.css               # Tailwind + custom styles (gradients, dark/light)
│   ├── layout.tsx                # Root layout with theme provider, AdSense script
│   ├── page.tsx                  # Homepage
│   ├── blog/                     # Blog routes
│   │   ├── page.tsx              # Blog index (list articles)
│   │   ├── [slug]/page.tsx       # Dynamic blog post
│   │   └── admin/page.tsx        # Simple Markdown editor (protected with basic auth)
│   ├── processing/               # Processing page (after upload)
│   │   └── page.tsx
│   ├── about/page.tsx
│   ├── contact/page.tsx
│   ├── privacy/page.tsx
│   ├── terms/page.tsx
│   └── report/page.tsx           # Misuse report form
├── components/                   # Reusable UI
│   ├── ui/                       # Tailwind components (Button, ProgressBar, etc.)
│   │   ├── Button.tsx
│   │   ├── UploadBox.tsx         # Drag-drop with Dropzone
│   │   ├── ActionDropdown.tsx    # Options menu
│   │   ├── ProgressBar.tsx       # With Framer Motion
│   │   └── ThemeToggle.tsx
│   ├── layout/                   # Layouts
│   │   ├── Header.tsx            # Nav bar with logo, links, theme toggle
│   │   ├── Footer.tsx            # Links to pages, copyright
│   │   └── AdSlots.tsx           # Reusable AdSense components (Banner, Sidebar)
│   └── video/                    # Video-specific
│       ├── Processor.tsx         # Form for options (trim inputs, watermark text/logo upload)
│       └── DownloadLink.tsx      # Temp link with timer
├── lib/                          # Utilities
│   ├── ffmpeg.ts                 # Fluent-ffmpeg wrappers (compress, convert, trim, extract, watermark)
│   ├── queue.ts                  # BullMQ setup
│   ├── storage.ts                # Upload/delete file helpers (Multer + fs)
│   └── utils.ts                  # General (e.g., generate temp ID, cron delete)
├── content/                      # Static content
│   └── blog/                     # Markdown files (e.g., how-to-compress.md)
├── public/                       # Static assets
│   ├── favicon.ico
│   ├── logo.png                  # VidDonloader logo
│   └── ads/                      # Placeholder for ad images if needed
├── api/                          # API Routes (in app/api/)
│   ├── upload/route.ts           # POST: Handle upload with Multer
│   ├── process/route.ts          # POST: Queue processing job
│   ├── status/[jobId]/route.ts   # GET: Poll job status/progress
│   └── download/[fileId]/route.ts # GET: Serve temp file
├── middleware.ts                 # For auth (admin), redirects
├── next.config.js                # Config (images, env)
├── tailwind.config.js            # Extend with gradients (e.g., from-purple-500 to-blue-500)
├── tsconfig.json
├── package.json                  # Scripts: dev, build, lint; deps as listed
└── .env.example                  # Vars: REDIS_URL, S3_BUCKET, ADSENSE_ID
```

**Theme Setup:** Use Tailwind's dark mode (class strategy). Add ThemeToggle in Header. Default: Light mode with gradient bg (e.g., `bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500`).

## Detailed Features Implementation

### 1. Homepage (app/page.tsx)
- **Layout:** Full-width hero section with gradient background (inspired by SaveClip: soft blues/purples). Centered upload box (max 80% width, responsive).
- **Upload Box (UploadBox.tsx):** Use React Dropzone for drag-and-drop or file select. Support MP4/AVI/MOV/etc. (validate <500MB). Preview uploaded video thumbnail.
- **Action Selection (ActionDropdown.tsx):** Select menu with options:
  - Compress Video (reduce size, e.g., via FFmpeg CRF 23-28).
  - Convert Format (dropdown: MP4, AVI, MOV, GIF; default MP4).
  - Trim Video (inputs: start/end time in seconds or HH:MM:SS; use React Hook Form).
  - Extract Audio (output MP3/WAV).
  - Add Watermark (text input for text, or file upload for logo; position: top-left/right/bottom).
- **Start Processing Button:** On click, POST to /api/upload (store file temp), then /api/process (queue job with options). Redirect to /processing with jobId.
- **Animations:** Framer Motion for box hover (scale 1.05), button pulse.
- **Ads:** Top banner (AdSlots.tsx: 728x90) above upload; sidebar ad (300x250) on desktop.
- **Mobile:** Stack vertically; touch-friendly drag area.

### 2. Video Processing (/processing/page.tsx)
- **UI:** Show uploaded video preview, selected options summary.
- **Backend Flow:**
  - **API: /api/upload/route.ts** (POST): Use Multer to save file to /tmp/uploads/[uniqueId]. Return filePath and jobId.
  - **Queue:** Use BullMQ (Redis) to add job: processVideo(jobData: {filePath, options: {action, params}}).
  - **Processing Logic (lib/ffmpeg.ts):** 
    - Spawn FFmpeg child process (fluent-ffmpeg).
    - Examples:
      - Compress: `ffmpeg(input).videoBitrate('500k').output(output)`.
      - Convert: `ffmpeg(input).output(output).format('mp4')` (handle formats).
      - Trim: `ffmpeg(input).seekInput(start).duration(end-start).output(output)`.
      - Extract Audio: `ffmpeg(input).noVideo().output(output).format('mp3')`.
      - Watermark: `ffmpeg(input).complexFilter([textfilter or overlay]).output(output)`.
    - Progress: Emit events via queue (update job progress 0-100%).
    - Output: Save to /tmp/processed/[jobId].mp4/etc. Generate signed URL if S3.
  - **API: /api/process/route.ts** (POST): Add to queue, return jobId.
  - **API: /api/status/[jobId]/route.ts** (GET): Return {status: 'processing'|'done'|'error', progress: %, outputUrl?}.
  - **Auto-Delete:** Queue a delayed job (24h) to fs.unlink file.
- **Frontend:** Poll status every 2s (use useSWR or interval). Show ProgressBar (Framer Motion animate width). On done: Show DownloadLink.tsx with temp URL (expires in 1h for security). Button: "Download Processed Video".
- **Error Handling:** Graceful errors (e.g., invalid format: "Upload failed, try again").

### 3. Blog Section (app/blog/)
- **Index (page.tsx):** Grid of article cards (title, excerpt, date, read time). Fetch from contentlayer (compile MDX at build).
- **Post ([slug]/page.tsx):** Render MDX with syntax highlighting (rehype). Insert AdSense between sections (e.g., after H2).
- **Admin (/blog/admin/page.tsx):** Simple form to create/edit Markdown (title, slug, content). Save to /content/blog/[slug].md. Basic password protect via middleware (env var).
- **SEO Articles Examples:** 5 pre-built MD files:
  - how-to-compress-video-online.md
  - best-formats-for-instagram-reels.md
  - trim-videos-without-software.md
  - extract-audio-from-video-free.md
  - add-watermark-to-videos.md
- **Ads:** Sidebar on desktop; in-content after 300 words.

### 4. UI/UX Details
- **Design:** Minimalist (white cards on gradient bg). Fonts: Inter (via Tailwind). Colors: Primary blue (#3B82F6), accents purple/pink.
- **Responsive:** Mobile-first (Tailwind sm/md/lg). Upload box full-width on mobile.
- **Dark/Light Mode:** Toggle in header; persist via localStorage.
- **Animations:** Subtle (e.g., fade-in on load, slide-up for progress).
- **Accessibility:** ARIA labels, keyboard nav, alt texts.

### 5. Extra Pages
- **About Us (about/page.tsx):** "VidDonloader is a free tool for processing your own videos. Built with Next.js for speed and privacy."
- **Contact Us (contact/page.tsx):** Form (name, email, message) → email via API (use Nodemailer or Vercel form).
- **Privacy Policy (privacy/page.tsx):** Adapt provided text to VidDonloader. Key: No personal data collection; anonymous use; files deleted after 24h. Include: "We do not store or share your uploaded videos."
- **Terms of Service (terms/page.tsx):** Adapt provided SaveClip ToS to VidDonloader. Replace "SaveClip" with "VidDonloader" throughout. Key sections:
  - Acceptance, User Obligations: "Use only for personal, non-commercial purposes with your own content. No infringement."
  - Disclaimer: "VidDonloader is not responsible for user violations."
  - Copyright/Trademark: Respect rights; users responsible for content.
  - Use License: Temporary download for personal viewing only.
  - Add DMCA Notice: "We comply with DMCA; report abuse via /report."
  - End: "© 2025 VidDonloader. All rights reserved. Not affiliated with any social media platforms."
- **Report Misuse (report/page.tsx):** Form (description, email) → log to admin email or database.

### 6. Additional Implementation Notes
- **AdSense Integration:** In layout.tsx, add `<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-[YOUR_ID]" crossorigin="anonymous"></script>`. Use `<ins class="adsbygoogle">` in AdSlots.tsx. Test with placeholder divs.
- **Security:** Validate uploads (file type, size). Sanitize inputs. Rate limit API (Vercel built-in). HTTPS enforced.
- **Performance:** Image optimization, lazy load videos, code splitting.
- **Testing:** Add basic tests (Jest for utils). Ensure FFmpeg works on Vercel (use @ffmpeg/ffmpeg for WASM if serverless issues).
- **Deliverables for Freelancer:** Full codebase in GitHub repo. Deployment guide (Vercel connect). 5 sample blog posts. Test on mobile/desktop.

This detailed spec ensures a clean, functional Next.js structure. Budget for 20-30 hours dev time. If issues with FFmpeg on Vercel, fallback to local deploy or Heroku. Contact for clarifications!